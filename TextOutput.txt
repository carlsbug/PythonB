Tokens:
[@0,0:4='fruit',<12>,1:0]
[@1,6:6='=',<18>,1:6]
[@2,7:13=''hello'',<13>,1:7]
[@3,14:15='\r\n',<24>,1:14]
[@4,16:16='j',<12>,2:0]
[@5,18:18='=',<18>,2:2]
[@6,20:21='10',<11>,2:4]
[@7,22:23='\r\n',<24>,2:6]
[@8,24:26='def',<10>,3:0]
[@9,28:31='main',<12>,3:4]
[@10,32:32='(',<1>,3:8]
[@11,33:33=')',<2>,3:9]
[@12,34:35='\r\n',<24>,3:10]
[@13,36:36='{',<3>,4:0]
[@14,37:38='\r\n',<24>,4:1]
[@15,41:42='if',<7>,5:2]
[@16,44:44='b',<12>,5:5]
[@17,46:46='>',<22>,5:7]
[@18,48:48='a',<12>,5:9]
[@19,49:50='\r\n',<24>,5:10]
[@20,53:53='{',<3>,6:2]
[@21,54:55='\r\n',<24>,6:3]
[@22,60:64='print',<6>,7:4]
[@23,65:65='(',<1>,7:9]
[@24,66:69='"ba"',<13>,7:10]
[@25,70:70=')',<2>,7:14]
[@26,71:72='\r\n',<24>,7:15]
[@27,75:75='}',<4>,8:2]
[@28,76:77='\r\n',<24>,8:3]
[@29,80:83='else',<8>,9:2]
[@30,84:85='\r\n',<24>,9:6]
[@31,88:88='{',<3>,10:2]
[@32,89:90='\r\n',<24>,10:3]
[@33,95:99='print',<6>,11:4]
[@34,100:100='(',<1>,11:9]
[@35,101:106='"haha"',<13>,11:10]
[@36,107:107=')',<2>,11:16]
[@37,108:109='\r\n',<24>,11:17]
[@38,114:114='j',<12>,12:4]
[@39,116:116='=',<18>,12:6]
[@40,119:119='2',<11>,12:9]
[@41,120:121='\r\n',<24>,12:10]
[@42,124:124='}',<4>,13:2]
[@43,125:126='\r\n',<24>,13:3]
[@44,127:127='}',<4>,14:0]
[@45,128:129='\r\n',<24>,14:1]
[@46,130:129='<EOF>',<-1>,15:0]

Parse tree (Lisp format):
(program (declarations_list (declarations (decl_list (decl (var_list (var_id fruit)) = (type_id (string 'hello'))) \r\n (decl (var_list (var_id j)) = (type_id (number 10))) \r\n))) (stmt_list (stmt (funtion_stmt def (funt_name main) ( (parameter_list parameter) ) \r\n { (stmt_list \r\n (stmt (if_stmt if (expr (expr b) (rel_op >) (expr a)) \r\n { (stmt_list \r\n (stmt (print_stmt print ( (string "ba") ))) \r\n) } \r\n else \r\n { (stmt_list \r\n (stmt (print_stmt print ( (string "haha") ))) \r\n (stmt (assignment_stmt (variable j) = (expr (number 2)) \r\n))) } \r\n))) })) \r\n))
